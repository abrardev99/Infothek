<?php
/** @noinspection PhpUndefinedClassInspection */
/** @noinspection PhpFullyQualifiedNameUsageInspection */
/** @noinspection PhpUnusedAliasInspection */

namespace App\Models {

    use Database\Factories\CategoryFactory;
    use Database\Factories\PostFactory;
    use Database\Factories\UserFactory;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Notifications\DatabaseNotification;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Support\Carbon;
    use LaravelIdea\Helper\App\Models\_IH_Category_C;
    use LaravelIdea\Helper\App\Models\_IH_Category_QB;
    use LaravelIdea\Helper\App\Models\_IH_Post_C;
    use LaravelIdea\Helper\App\Models\_IH_Post_QB;
    use LaravelIdea\Helper\App\Models\_IH_User_C;
    use LaravelIdea\Helper\App\Models\_IH_User_QB;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_C;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_QB;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_IH_Media_C;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_IH_Media_QB;
    use Spatie\MediaLibrary\MediaCollections\Models\Media;
    
    /**
     * @property int $id
     * @property string $name
     * @property string|null $description
     * @property string $slug
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property int $user_id
     * @property int|null $category_id
     * @property _IH_Category_C|Category[] $childCategories
     * @property-read int $child_categories_count
     * @method HasMany|_IH_Category_QB childCategories()
     * @property Category $parentCategory
     * @method BelongsTo|_IH_Category_QB parentCategory()
     * @property _IH_Post_C|Post[] $posts
     * @property-read int $posts_count
     * @method HasMany|_IH_Post_QB posts()
     * @method _IH_Category_QB newModelQuery()
     * @method _IH_Category_QB newQuery()
     * @method static _IH_Category_QB query()
     * @method static _IH_Category_C|Category[] all()
     * @method static _IH_Category_QB whereId($value)
     * @method static _IH_Category_QB whereName($value)
     * @method static _IH_Category_QB whereDescription($value)
     * @method static _IH_Category_QB whereSlug($value)
     * @method static _IH_Category_QB whereCreatedAt($value)
     * @method static _IH_Category_QB whereUpdatedAt($value)
     * @method static _IH_Category_QB whereUserId($value)
     * @method static _IH_Category_QB whereCategoryId($value)
     * @method static Category baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Category create(array $attributes = [])
     * @method static _IH_Category_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Category_C|Category[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Category_QB distinct()
     * @method static bool doesntExist()
     * @method static bool doesntExistOr(\Closure $callback)
     * @method static _IH_Category_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static bool existsOr(\Closure $callback)
     * @method static Category|null find($id, array $columns = ['*'])
     * @method static _IH_Category_C|Category[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Category findOrFail($id, array $columns = ['*'])
     * @method static _IH_Category_C|Category[] findOrNew($id, array $columns = ['*'])
     * @method static Category first(array|string $columns = ['*'])
     * @method static Category firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Category firstOrCreate(array $attributes = [], array $values = [])
     * @method static Category firstOrFail(array $columns = ['*'])
     * @method static Category firstOrNew(array $attributes = [], array $values = [])
     * @method static Category firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Category forceCreate(array $attributes)
     * @method static _IH_Category_C|Category[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Category_C|Category[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Category getModel()
     * @method static Category[] getModels(array|string $columns = ['*'])
     * @method static _IH_Category_QB getQuery()
     * @method static _IH_Category_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Category_C|Category[] hydrate(array $items)
     * @method static _IH_Category_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Category_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Category_QB latest(Expression|string $column = null)
     * @method static _IH_Category_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Category_QB limit(int $value)
     * @method static Category make(array $attributes = [])
     * @method static Category newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Category_QB offset(int $value)
     * @method static _IH_Category_QB oldest(Expression|string $column = null)
     * @method static _IH_Category_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Category_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Category_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Category[]|_IH_Category_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Category_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Category_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Category_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Category[]|_IH_Category_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Category_QB skip(int $value)
     * @method static Category sole(array|string $columns = ['*'])
     * @method static int sum(string $column)
     * @method static _IH_Category_QB take(int $value)
     * @method static _IH_Category_QB tap(callable $callback)
     * @method static _IH_Category_QB truncate()
     * @method static _IH_Category_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Category updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Category_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Category_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Category_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Category_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Category_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Category_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Category_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Category_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereKey($id)
     * @method static _IH_Category_QB whereKeyNot($id)
     * @method static _IH_Category_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Category_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Category_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Category_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Category_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Category_QB withCasts(array $casts)
     * @method static _IH_Category_QB withCount($relations)
     * @method static _IH_Category_QB withExists(array|string $relation)
     * @method static _IH_Category_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Category_QB withMax(array|string $relation, string $column)
     * @method static _IH_Category_QB withMin(array|string $relation, string $column)
     * @method static _IH_Category_QB withOnly($relations)
     * @method static _IH_Category_QB withSum(array|string $relation, string $column)
     * @method static _IH_Category_QB without($relations)
     * @method static _IH_Category_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Category_QB withoutGlobalScopes(array $scopes = null)
     * @method static CategoryFactory factory(...$parameters)
     */
    class Category extends Model {}
    
    /**
     * @property int $id
     * @property string $title
     * @property string $slug
     * @property string $excerpt
     * @property string $content
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property int $user_id
     * @property int $category_id
     * @property Category $category
     * @method BelongsTo|_IH_Category_QB category()
     * @property _IH_Media_C|Media[] $media
     * @property-read int $media_count
     * @method MorphToMany|_IH_Media_QB media()
     * @property User $user
     * @method BelongsTo|_IH_User_QB user()
     * @method _IH_Post_QB newModelQuery()
     * @method _IH_Post_QB newQuery()
     * @method static _IH_Post_QB query()
     * @method static _IH_Post_C|Post[] all()
     * @method static _IH_Post_QB whereId($value)
     * @method static _IH_Post_QB whereTitle($value)
     * @method static _IH_Post_QB whereSlug($value)
     * @method static _IH_Post_QB whereExcerpt($value)
     * @method static _IH_Post_QB whereContent($value)
     * @method static _IH_Post_QB whereCreatedAt($value)
     * @method static _IH_Post_QB whereUpdatedAt($value)
     * @method static _IH_Post_QB whereUserId($value)
     * @method static _IH_Post_QB whereCategoryId($value)
     * @method static Post baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Post create(array $attributes = [])
     * @method static _IH_Post_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Post_C|Post[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Post_QB distinct()
     * @method static bool doesntExist()
     * @method static bool doesntExistOr(\Closure $callback)
     * @method static _IH_Post_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static bool existsOr(\Closure $callback)
     * @method static Post|null find($id, array $columns = ['*'])
     * @method static _IH_Post_C|Post[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Post findOrFail($id, array $columns = ['*'])
     * @method static _IH_Post_C|Post[] findOrNew($id, array $columns = ['*'])
     * @method static Post first(array|string $columns = ['*'])
     * @method static Post firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Post firstOrCreate(array $attributes = [], array $values = [])
     * @method static Post firstOrFail(array $columns = ['*'])
     * @method static Post firstOrNew(array $attributes = [], array $values = [])
     * @method static Post firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Post forceCreate(array $attributes)
     * @method static _IH_Post_C|Post[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Post_C|Post[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Post getModel()
     * @method static Post[] getModels(array|string $columns = ['*'])
     * @method static _IH_Post_QB getQuery()
     * @method static _IH_Post_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Post_C|Post[] hydrate(array $items)
     * @method static _IH_Post_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Post_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Post_QB latest(Expression|string $column = null)
     * @method static _IH_Post_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Post_QB limit(int $value)
     * @method static Post make(array $attributes = [])
     * @method static Post newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Post_QB offset(int $value)
     * @method static _IH_Post_QB oldest(Expression|string $column = null)
     * @method static _IH_Post_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Post_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Post_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Post[]|_IH_Post_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Post_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Post_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Post_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Post[]|_IH_Post_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Post_QB skip(int $value)
     * @method static Post sole(array|string $columns = ['*'])
     * @method static int sum(string $column)
     * @method static _IH_Post_QB take(int $value)
     * @method static _IH_Post_QB tap(callable $callback)
     * @method static _IH_Post_QB truncate()
     * @method static _IH_Post_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Post updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Post_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Post_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Post_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Post_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Post_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Post_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Post_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Post_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Post_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Post_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Post_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Post_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Post_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Post_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Post_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Post_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Post_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Post_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Post_QB whereKey($id)
     * @method static _IH_Post_QB whereKeyNot($id)
     * @method static _IH_Post_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Post_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Post_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Post_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Post_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Post_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Post_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Post_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Post_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Post_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Post_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Post_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Post_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Post_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Post_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Post_QB withCasts(array $casts)
     * @method static _IH_Post_QB withCount($relations)
     * @method static _IH_Post_QB withExists(array|string $relation)
     * @method static _IH_Post_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Post_QB withMax(array|string $relation, string $column)
     * @method static _IH_Post_QB withMin(array|string $relation, string $column)
     * @method static _IH_Post_QB withOnly($relations)
     * @method static _IH_Post_QB withSum(array|string $relation, string $column)
     * @method static _IH_Post_QB without($relations)
     * @method static _IH_Post_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Post_QB withoutGlobalScopes(array $scopes = null)
     * @method static PostFactory factory(...$parameters)
     */
    class Post extends Model {}
    
    /**
     * @property int $id
     * @property string $name
     * @property string $email
     * @property Carbon|null $email_verified_at
     * @property string $password
     * @property string|null $remember_token
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property _IH_Category_C|Category[] $categories
     * @property-read int $categories_count
     * @method HasMany|_IH_Category_QB categories()
     * @property _IH_DatabaseNotification_C|DatabaseNotification[] $notifications
     * @property-read int $notifications_count
     * @method MorphToMany|_IH_DatabaseNotification_QB notifications()
     * @property _IH_Post_C|Post[] $posts
     * @property-read int $posts_count
     * @method HasMany|_IH_Post_QB posts()
     * @method _IH_User_QB newModelQuery()
     * @method _IH_User_QB newQuery()
     * @method static _IH_User_QB query()
     * @method static _IH_User_C|User[] all()
     * @method static _IH_User_QB whereId($value)
     * @method static _IH_User_QB whereName($value)
     * @method static _IH_User_QB whereEmail($value)
     * @method static _IH_User_QB whereEmailVerifiedAt($value)
     * @method static _IH_User_QB wherePassword($value)
     * @method static _IH_User_QB whereRememberToken($value)
     * @method static _IH_User_QB whereCreatedAt($value)
     * @method static _IH_User_QB whereUpdatedAt($value)
     * @method static User baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static User create(array $attributes = [])
     * @method static _IH_User_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_User_C|User[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_User_QB distinct()
     * @method static bool doesntExist()
     * @method static bool doesntExistOr(\Closure $callback)
     * @method static _IH_User_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static bool existsOr(\Closure $callback)
     * @method static User|null find($id, array $columns = ['*'])
     * @method static _IH_User_C|User[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static User findOrFail($id, array $columns = ['*'])
     * @method static _IH_User_C|User[] findOrNew($id, array $columns = ['*'])
     * @method static User first(array|string $columns = ['*'])
     * @method static User firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static User firstOrCreate(array $attributes = [], array $values = [])
     * @method static User firstOrFail(array $columns = ['*'])
     * @method static User firstOrNew(array $attributes = [], array $values = [])
     * @method static User firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static User forceCreate(array $attributes)
     * @method static _IH_User_C|User[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_User_C|User[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static User getModel()
     * @method static User[] getModels(array|string $columns = ['*'])
     * @method static _IH_User_QB getQuery()
     * @method static _IH_User_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_User_C|User[] hydrate(array $items)
     * @method static _IH_User_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_User_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_User_QB latest(Expression|string $column = null)
     * @method static _IH_User_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_User_QB limit(int $value)
     * @method static User make(array $attributes = [])
     * @method static User newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_User_QB offset(int $value)
     * @method static _IH_User_QB oldest(Expression|string $column = null)
     * @method static _IH_User_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_User_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_User_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|User[]|_IH_User_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_User_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_User_QB select(array|mixed $columns = ['*'])
     * @method static _IH_User_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|User[]|_IH_User_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_User_QB skip(int $value)
     * @method static User sole(array|string $columns = ['*'])
     * @method static int sum(string $column)
     * @method static _IH_User_QB take(int $value)
     * @method static _IH_User_QB tap(callable $callback)
     * @method static _IH_User_QB truncate()
     * @method static _IH_User_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static User updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_User_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_User_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_User_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_User_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_User_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_User_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_User_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_User_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_User_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereKey($id)
     * @method static _IH_User_QB whereKeyNot($id)
     * @method static _IH_User_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_User_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_User_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_User_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_User_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_User_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_User_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_User_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_User_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_User_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_User_QB withAvg(array|string $relation, string $column)
     * @method static _IH_User_QB withCasts(array $casts)
     * @method static _IH_User_QB withCount($relations)
     * @method static _IH_User_QB withExists(array|string $relation)
     * @method static _IH_User_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_User_QB withMax(array|string $relation, string $column)
     * @method static _IH_User_QB withMin(array|string $relation, string $column)
     * @method static _IH_User_QB withOnly($relations)
     * @method static _IH_User_QB withSum(array|string $relation, string $column)
     * @method static _IH_User_QB without($relations)
     * @method static _IH_User_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_User_QB withoutGlobalScopes(array $scopes = null)
     * @method static UserFactory factory(...$parameters)
     */
    class User extends Model {}
}

namespace Illuminate\Notifications {

    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_C;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_QB;
    
    /**
     * @property Model $notifiable
     * @method MorphTo notifiable()
     * @method _IH_DatabaseNotification_QB newModelQuery()
     * @method _IH_DatabaseNotification_QB newQuery()
     * @method static _IH_DatabaseNotification_QB query()
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] all()
     * @method static DatabaseNotification baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static DatabaseNotification create(array $attributes = [])
     * @method static _IH_DatabaseNotification_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_DatabaseNotification_QB distinct()
     * @method static bool doesntExist()
     * @method static bool doesntExistOr(\Closure $callback)
     * @method static _IH_DatabaseNotification_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static bool existsOr(\Closure $callback)
     * @method static DatabaseNotification|null find($id, array $columns = ['*'])
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static DatabaseNotification findOrFail($id, array $columns = ['*'])
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] findOrNew($id, array $columns = ['*'])
     * @method static DatabaseNotification first(array|string $columns = ['*'])
     * @method static DatabaseNotification firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static DatabaseNotification firstOrCreate(array $attributes = [], array $values = [])
     * @method static DatabaseNotification firstOrFail(array $columns = ['*'])
     * @method static DatabaseNotification firstOrNew(array $attributes = [], array $values = [])
     * @method static DatabaseNotification firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static DatabaseNotification forceCreate(array $attributes)
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static DatabaseNotification getModel()
     * @method static DatabaseNotification[] getModels(array|string $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB getQuery()
     * @method static _IH_DatabaseNotification_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] hydrate(array $items)
     * @method static _IH_DatabaseNotification_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_DatabaseNotification_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_DatabaseNotification_QB latest(Expression|string $column = null)
     * @method static _IH_DatabaseNotification_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_DatabaseNotification_QB limit(int $value)
     * @method static DatabaseNotification make(array $attributes = [])
     * @method static DatabaseNotification newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB offset(int $value)
     * @method static _IH_DatabaseNotification_QB oldest(Expression|string $column = null)
     * @method static _IH_DatabaseNotification_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_DatabaseNotification_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_DatabaseNotification_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|DatabaseNotification[]|_IH_DatabaseNotification_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_DatabaseNotification_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_DatabaseNotification_QB select(array|mixed $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|DatabaseNotification[]|_IH_DatabaseNotification_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_DatabaseNotification_QB skip(int $value)
     * @method static DatabaseNotification sole(array|string $columns = ['*'])
     * @method static int sum(string $column)
     * @method static _IH_DatabaseNotification_QB take(int $value)
     * @method static _IH_DatabaseNotification_QB tap(callable $callback)
     * @method static _IH_DatabaseNotification_QB truncate()
     * @method static _IH_DatabaseNotification_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static DatabaseNotification updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_DatabaseNotification_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_DatabaseNotification_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_DatabaseNotification_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_DatabaseNotification_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_DatabaseNotification_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_DatabaseNotification_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereKey($id)
     * @method static _IH_DatabaseNotification_QB whereKeyNot($id)
     * @method static _IH_DatabaseNotification_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_DatabaseNotification_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_DatabaseNotification_QB withAvg(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB withCasts(array $casts)
     * @method static _IH_DatabaseNotification_QB withCount($relations)
     * @method static _IH_DatabaseNotification_QB withExists(array|string $relation)
     * @method static _IH_DatabaseNotification_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_DatabaseNotification_QB withMax(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB withMin(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB withOnly($relations)
     * @method static _IH_DatabaseNotification_QB withSum(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB without($relations)
     * @method static _IH_DatabaseNotification_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_DatabaseNotification_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_DatabaseNotification_QB read()
     * @method static _IH_DatabaseNotification_QB unread()
     */
    class DatabaseNotification extends Model {}
}

namespace Spatie\MediaLibrary\MediaCollections\Models {

    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Support\Carbon;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_IH_Media_C;
    use LaravelIdea\Helper\Spatie\MediaLibrary\MediaCollections\Models\_IH_Media_QB;
    
    /**
     * @property int $id
     * @property int $model_id
     * @property string $model_type
     * @property string|null $uuid
     * @property string $collection_name
     * @property string $name
     * @property string $file_name
     * @property string|null $mime_type
     * @property string $disk
     * @property string|null $conversions_disk
     * @property int $size
     * @property array $manipulations
     * @property array $custom_properties
     * @property array $generated_conversions
     * @property array $responsive_images
     * @property int|null $order_column
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property-read string $extension
     * @property-read string $human_readable_size
     * @property-read string $type
     * @property Model $model
     * @method MorphTo model()
     * @method _IH_Media_QB newModelQuery()
     * @method _IH_Media_QB newQuery()
     * @method static _IH_Media_QB query()
     * @method static _IH_Media_C|Media[] all()
     * @method static _IH_Media_QB whereId($value)
     * @method static _IH_Media_QB whereModelId($value)
     * @method static _IH_Media_QB whereModelType($value)
     * @method static _IH_Media_QB whereUuid($value)
     * @method static _IH_Media_QB whereCollectionName($value)
     * @method static _IH_Media_QB whereName($value)
     * @method static _IH_Media_QB whereFileName($value)
     * @method static _IH_Media_QB whereMimeType($value)
     * @method static _IH_Media_QB whereDisk($value)
     * @method static _IH_Media_QB whereConversionsDisk($value)
     * @method static _IH_Media_QB whereSize($value)
     * @method static _IH_Media_QB whereManipulations($value)
     * @method static _IH_Media_QB whereCustomProperties($value)
     * @method static _IH_Media_QB whereGeneratedConversions($value)
     * @method static _IH_Media_QB whereResponsiveImages($value)
     * @method static _IH_Media_QB whereOrderColumn($value)
     * @method static _IH_Media_QB whereCreatedAt($value)
     * @method static _IH_Media_QB whereUpdatedAt($value)
     * @method static Media baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Media create(array $attributes = [])
     * @method static _IH_Media_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Media_C|Media[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Media_QB distinct()
     * @method static bool doesntExist()
     * @method static bool doesntExistOr(\Closure $callback)
     * @method static _IH_Media_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static bool existsOr(\Closure $callback)
     * @method static Media|null find($id, array $columns = ['*'])
     * @method static _IH_Media_C|Media[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Media findOrFail($id, array $columns = ['*'])
     * @method static _IH_Media_C|Media[] findOrNew($id, array $columns = ['*'])
     * @method static Media first(array|string $columns = ['*'])
     * @method static Media firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Media firstOrCreate(array $attributes = [], array $values = [])
     * @method static Media firstOrFail(array $columns = ['*'])
     * @method static Media firstOrNew(array $attributes = [], array $values = [])
     * @method static Media firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Media forceCreate(array $attributes)
     * @method static _IH_Media_C|Media[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Media_C|Media[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Media getModel()
     * @method static Media[] getModels(array|string $columns = ['*'])
     * @method static _IH_Media_QB getQuery()
     * @method static _IH_Media_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Media_C|Media[] hydrate(array $items)
     * @method static _IH_Media_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Media_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Media_QB latest(Expression|string $column = null)
     * @method static _IH_Media_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Media_QB limit(int $value)
     * @method static Media make(array $attributes = [])
     * @method static Media newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Media_QB offset(int $value)
     * @method static _IH_Media_QB oldest(Expression|string $column = null)
     * @method static _IH_Media_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Media_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Media_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Media[]|_IH_Media_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Media_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Media_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Media_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Media[]|_IH_Media_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Media_QB skip(int $value)
     * @method static Media sole(array|string $columns = ['*'])
     * @method static int sum(string $column)
     * @method static _IH_Media_QB take(int $value)
     * @method static _IH_Media_QB tap(callable $callback)
     * @method static _IH_Media_QB truncate()
     * @method static _IH_Media_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Media updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Media_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Media_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Media_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Media_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Media_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Media_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Media_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Media_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Media_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Media_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Media_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Media_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Media_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Media_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Media_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Media_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Media_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Media_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Media_QB whereKey($id)
     * @method static _IH_Media_QB whereKeyNot($id)
     * @method static _IH_Media_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Media_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Media_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Media_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Media_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Media_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Media_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Media_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Media_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Media_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Media_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Media_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Media_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Media_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Media_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Media_QB withCasts(array $casts)
     * @method static _IH_Media_QB withCount($relations)
     * @method static _IH_Media_QB withExists(array|string $relation)
     * @method static _IH_Media_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Media_QB withMax(array|string $relation, string $column)
     * @method static _IH_Media_QB withMin(array|string $relation, string $column)
     * @method static _IH_Media_QB withOnly($relations)
     * @method static _IH_Media_QB withSum(array|string $relation, string $column)
     * @method static _IH_Media_QB without($relations)
     * @method static _IH_Media_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Media_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Media_QB ordered()
     */
    class Media extends Model {}
}